package com.codingame.game;
import java.util.List;

import com.codingame.gameengine.core.AbstractPlayer.TimeoutException;
import com.codingame.gameengine.core.AbstractReferee;
#if($context.gameType != "Multi")import com.codingame.gameengine.core.SoloGameManager;#end
#if($context.gameType == "Multi")import com.codingame.gameengine.core.MultiplayerGameManager;#end
import com.codingame.gameengine.module.entities.GraphicEntityModule;
import com.google.inject.Inject;

public class Referee extends AbstractReferee {

#if($context.gameType != "Multi")    @Inject private SoloGameManager<Player> gameManager;#end
#if($context.gameType == "Multi")    @Inject private MultiplayerGameManager<Player> gameManager;#end

    @Inject private GraphicEntityModule graphicEntityModule;

    @Override
    public void init() {
        // Initialize your game here.
    }

    @Override
    public void gameTurn(int turn) {
#if($context.gameType != "Multi")
        Player player = gameManager.getPlayer();
        player.sendInputLine("input");
        player.execute();
        try {
            List<String> outputs = player.getOutputs();
            // Check validity of the player output and compute the new game state
        } catch (TimeoutException e) {
            gameManager.loseGame();
        }
#end
#if($context.gameType == "Multi")
        for (Player player : gameManager.getActivePlayers()) {
            player.sendInputLine("input");
            player.execute();
        }

        for (Player player : gameManager.getActivePlayers()) {
            try {
                List<String> outputs = player.getOutputs();
                // Check validity of the player output and compute the new game state
            } catch (TimeoutException e) {
                player.deactivate(String.format("$%d timeout!", player.getIndex()));
            }
        }
#end
    }
}